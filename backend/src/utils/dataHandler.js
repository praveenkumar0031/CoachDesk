// Import the functions you need from the Firebase SDKs
import { initializeApp } from "firebase/app";
import { getDatabase, ref, push, get, child, set, update, remove } from "firebase/database";

// Your web app's Firebase configuration (replace with your actual config)
// This should typically be loaded from an environment variable or a configuration file
// You can find this in your Firebase project settings -> "Add app" -> "Web"
const firebaseConfig = {
  apiKey: "YOUR_API_KEY",
  authDomain: "YOUR_AUTH_DOMAIN",
  databaseURL: "https://projectsem2-d4e74-default-rtdb.asia-southeast1.firebasedatabase.app", // Your RTDB URL
  projectId: "projectsem2-d4e74",
  storageBucket: "YOUR_STORAGE_BUCKET",
  messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
  appId: "YOUR_APP_ID"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const db = getDatabase(app); // Get a reference to the Realtime Database service

// --- Firebase Realtime Database Operations ---

// Equivalent to your readData() function, but for Firebase
const getCoaches = async () => {
  const coachesRef = ref(db, 'coaches');
  try {
    const snapshot = await get(coachesRef);
    if (snapshot.exists()) {
      // Firebase returns an object of objects, convert to array if preferred
      const coachesObject = snapshot.val();
      return Object.keys(coachesObject).map(key => ({
        firebaseId: key, // The unique key generated by Firebase
        ...coachesObject[key]
      }));
    } else {
      console.log("No coaches available in the database.");
      return [];
    }
  } catch (error) {
    console.error("Error reading coaches from Firebase:", error);
    return [];
  }
};

// Equivalent to your writeData() for adding a new coach
const addCoach = async (coachData) => {
  // `push()` generates a unique key for each new item,
  // which is perfect for adding new coaches to a list.
  const newCoachRef = push(ref(db, 'coaches'));
  try {
    // You might want to assign your numeric `id` here or let Firebase handle keys
    // For now, we'll let Firebase manage the primary key for the entry.
    // If you want your numeric id to be part of the data, ensure it's in coachData.
    // Also, handle the `createdAt` date type for Firebase (e.g., store as timestamp).
    const coachToSave = {
      ...coachData,
      createdAt: coachData.createdAt ? coachData.createdAt.getTime() : Date.now()
    };

    await set(newCoachRef, coachToSave);
    console.log("Coach added successfully with ID:", newCoachRef.key);
    return { firebaseId: newCoachRef.key, ...coachToSave };
  } catch (error) {
    console.error("Error adding coach to Firebase:", error);
    throw error; // Re-throw to handle in calling code
  }
};

// Example of how to update an existing coach (using its Firebase-generated ID)
const updateCoach = async (firebaseId, updatedFields) => {
  const coachRef = ref(db, `coaches/${firebaseId}`);
  try {
    // Convert createdAt to timestamp if it's a Date object
    if (updatedFields.createdAt instanceof Date) {
      updatedFields.createdAt = updatedFields.createdAt.getTime();
    }
    await update(coachRef, updatedFields);
    console.log("Coach updated successfully:", firebaseId);
  } catch (error) {
    console.error("Error updating coach in Firebase:", error);
    throw error;
  }
};

// Example of how to delete a coach
const deleteCoach = async (firebaseId) => {
  const coachRef = ref(db, `coaches/${firebaseId}`);
  try {
    await remove(coachRef);
    console.log("Coach deleted successfully:", firebaseId);
  } catch (error) {
    console.error("Error deleting coach from Firebase:", error);
    throw error;
  }
};

// --- Export these functions for use in your application ---
export {
  getCoaches,
  addCoach,
  updateCoach,
  deleteCoach
};
